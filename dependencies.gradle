ext{
    versions=[
            springBoot      :"2.7.17",
            springCloud     :"3.1.8",

            lombok          :"1.18.30",
            mapstruct       :"1.5.5.Final",
            postgres        :"42.3.8",
            swagger         :"1.6.15",
            jwt             :"4.4.0",
            circuitbreaker  :"2.1.7"
    ]
/*
    Bu kısımda Key Value şeklinde bağımlılık listesi oluşturacağız.
    1. bağımlılığa bir ad belirle ve 2 nokta üst üste koy.
    2. projenin goup-idsini yaz ve 2 nokta üst üste koy.
    3. projenin artifact-idsini yaz ve 2 nokta üst üste koy.
    4. Versiyon numarasını yaz veya yukarıda o versiyon numarasını tuttuğumuz key değerini ekle.

 */

    libs=[
            springBootWeb           :"org.springframework.boot:spring-boot-starter-web:$versions.springBoot",
            springBootDataJpa       :"org.springframework.boot:spring-boot-starter-data-jpa:$versions.springBoot",
            // jpa ilişkisel veritabanında kullandığımız kütüphane database-java arasında bağlantı kurar. Entity database aktarmaya yarar.

            springBootValidation    :"org.springframework.boot:spring-boot-starter-validation:$versions.springBoot",
            //  validation işlemleri kontrol- kural işlemlerini kontrol edeer. Email boş geiçelemez. En az 8 karakter kullanım kuralı anatasyonları gibi şeyleri lkontrol eder.

            postgres                :"org.postgresql:postgresql:$versions.postgres",
            lombok                  :"org.projectlombok:lombok:$versions.lombok",
            swagger                 :"org.springdoc:springdoc-openapi-ui:$versions.swagger",     // openApi için swagger arayüzü
            mapstruct               :"org.mapstruct:mapstruct:$versions.mapstruct",
            mapstructProcessor      :"org.mapstruct:mapstruct-processor:$versions.mapstruct",
            // iki sınıf arasında veri aktarımını sağlar. dto-Entity arasında örn. veya 2 dto arasında aktarımı sağlar.


            springOpenFeign         :"org.springframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",
            // birbirleriyle haberleşmesini sağlayan yapı
            jwt                     :"com.auth0:java-jwt:$versions.jwt",
            // jwt token üretmesini sağlayan yapı
            mongoDb                 :"org.springframework.boot:spring-boot-starter-data-mongodb:$versions.springBoot",
            springOpenFeigin        :"org.sprinframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",

//            springBootDataMongoDB   :"org.springframework.boot:spring-boot-starter-data-mongodb:$versions.springBoot",
//
//            springBootAmqp          :"org.springframework.boot:spring-boot-starter-amqp:$versions.springBoot",
//            springBootSecurity          :"org.springframework.boot:spring-boot-starter-security:$versions.springBoot",
//            springBootDataRedis     :"org.springframework.boot:spring-boot-starter-data-redis:$versions.springBoot",
//
//
//
//            springCloudConfigServer :"org.springframework.cloud:spring-cloud-config-server:$versions.springCloud",
//            springCloudStarterConfig:"org.springframework.cloud:spring-cloud-starter-config:$versions.springCloud",
//            springCloudConfigClient :"org.springframework.cloud:spring-cloud-config-client:$versions.springCloud",
//
//            springCloudStarterGateway:"org.springframework.cloud:spring-cloud-starter-gateway:$versions.springCloud",
//            springCloudCircuitBreaker:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j:$versions.circuitbreaker",
//            springCloudCircuitBreakerReactor:"org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j:$versions.circuitbreaker",
//
//            springCloudSleuth        :"org.springframework.cloud:spring-cloud-starter-sleuth:$versions.springCloud",
//            springCloudSleuthZipkin  :"org.springframework.cloud:spring-cloud-sleuth-zipkin:$versions.springCloud",


    ]

}